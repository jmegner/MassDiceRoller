{"version":3,"sources":["components/ResultTable.tsx","components/PipDisplays.tsx","App.tsx","index.tsx"],"names":["ResultTable","props","rows","runningSum","pip","displayMin","diceCounts","get","displayMax","push","reverse","Table","striped","PipDisplay","Container","style","width","Row","Col","className","Image","src","process","alt","height","count","type","id","checked","wantReroll","onChange","pipsToRerollChangeHandler","PipDisplays","pipDisplays","_","map","pipId","rolledDiceCounts","pipsToReroll","has","pipStuff","row","pipRow","col","App","useState","Random","MersenneTwister19937","autoSeed","rng","diceQuantity","setDiceQuantity","Map","setRolledDiceCounts","Set","setPipsToReroll","randomRollResult","rawRolls","dice","rollResultCounts","roll","set","placeholder","value","event","target","Button","onClick","newValue","pipsToRerollNewState","add","delete","numDiceToReroll","newRolledDiceCounts","diceForThisPip","rolls1","rolls2","pips","union","Array","from","keys","combinedRolls","combineRollResults","disabled","size","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0661f0a8.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Table } from 'react-bootstrap';\n\ninterface Props {\n    displayMin: number;\n    displayMax: number;\n    diceCounts: Map<number,number>\n}\n\nconst ResultTable: React.FC<Props> = (props: Props) => {\n  let rows: any[] = [];\n  let runningSum = 0;\n\n  for (let pip = 6; pip >= props.displayMin; pip--) {\n      let diceCount = props.diceCounts.get(pip) || 0;\n      runningSum += diceCount;\n\n      if(pip <= props.displayMax) {\n        rows.push(\n          <tr key={pip}>\n            <td>{pip}+</td>\n            <td data-testid={'stat' + pip}>{runningSum}</td>\n          </tr>\n        );\n      }\n  }\n\n  rows.reverse();\n  \n  return (\n    <Table striped>\n      <thead>\n        <tr>\n          <th>Stat</th>\n          <th>Qty</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows}\n      </tbody>\n    </Table>\n  );\n}\n\nexport default ResultTable;\n","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport * as _ from 'lodash';\n\ninterface PipDisplayProps {\n    pip: number,\n    count: number,\n    wantReroll: boolean,\n    pipsToRerollChangeHandler: (pip: number, newValue: boolean) => void,\n}\n\nconst PipDisplay: React.FC<PipDisplayProps> = (props: PipDisplayProps) => {\n  const onChangeHandler = () => props.pipsToRerollChangeHandler(props.pip, !props.wantReroll);\n  return ( \n    <Container style={{width: '50px'}}>\n      <Row>\n        <Col className='d-flex justify-content-center align-items-center'>\n          <Image\n            src={process.env.PUBLIC_URL + '/images/pips' + props.pip + '.svg'}\n            alt={'pip ' + props.pip}\n            style={{ width: '40px', height: '40px' }}\n          />\n        </Col>\n      </Row>\n      <Row>\n        <Col data-testid={'pip' + props.pip + 'Count'} className='d-flex justify-content-center align-items-center'>\n          {props.count}\n        </Col>\n      </Row>\n      <Row>\n        <Col className='d-flex justify-content-center align-items-center'>\n          <input\n            type=\"checkbox\"\n            id={\"reroll\" + props.pip}\n            checked={props.wantReroll} onChange={onChangeHandler}\n          />\n          </Col>\n      </Row>\n    </Container>\n  );\n}\n\ninterface Props {\n  rolledDiceCounts: Map<number, number>,\n  pipsToReroll: Set<number>,\n  pipsToRerollChangeHandler: (pip: number, newValue: boolean) => void,\n}\n\nconst PipDisplays: React.FC<Props> = (props: Props) => {\n  let pipDisplays = _.range(1, 6 + 1).map(pipId => <PipDisplay\n    pip={pipId}\n    count={props.rolledDiceCounts.get(pipId) ?? 0}\n    wantReroll={props.pipsToReroll.has(pipId)}\n    pipsToRerollChangeHandler={props.pipsToRerollChangeHandler}\n    />\n    );\n\n\n  let pipStuff = [];\n\n  for(let row = 0; row < 2; row++) {\n    let pipRow: JSX.Element[] = [];\n\n    for(let col = 0; col < 3; col++) {\n      pipRow.push(<Col key={'col' + col} className=\"my-2\">{pipDisplays[3 * row + col]}</Col>)\n    }\n\n    pipStuff.push(<Row key={'row' + row} className=\"d-flex justify-content-center\">{pipRow}</Row>)\n  }\n\n  return <Container style={{width: '250px'}}>{pipStuff}</Container>\n}\n\nexport default PipDisplays;","import React, {useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { MersenneTwister19937, Random } from 'random-js';\nimport _ from 'lodash';\n\nimport ResultTable from './components/ResultTable';\nimport PipDisplays from './components/PipDisplays';\n\nexport default function App() {\n  const [rng] = useState(new Random(MersenneTwister19937.autoSeed()));\n  const [diceQuantity, setDiceQuantity] = useState(600);\n  const [rolledDiceCounts, setRolledDiceCounts] = useState(new Map<number,number>());\n  const [pipsToReroll, setPipsToReroll] = useState(new Set<number>())\n\n  const randomRollResult = (rng: Random, diceQuantity: number): Map<number,number> => {\n    let rawRolls = rng.dice(6, diceQuantity);\n    let rollResultCounts = new Map<number,number>();\n\n    for(let roll of rawRolls) {\n      rollResultCounts.set(roll, (rollResultCounts.get(roll) || 0) + 1);\n    }\n    return rollResultCounts;\n  };\n\n  const combineRollResults = (rolls1: Map<number,number>, rolls2: Map<number,number>) => {\n    let pips = _.union(Array.from(rolls1.keys()), Array.from(rolls2.keys()));\n    let combinedRolls = new Map<number,number>();\n\n    for(let pip of pips) {\n      combinedRolls.set(pip, (rolls1.get(pip) ?? 0) + (rolls2.get(pip) ?? 0) );\n    }\n\n    return combinedRolls;\n  };\n\n  const handleDiceQuantityChange = (event: any) => {\n    setDiceQuantity(event.target.value);\n  };\n\n  const handleRollClick = () => {\n    setRolledDiceCounts(randomRollResult(rng, diceQuantity));\n  };\n\n  const handlePipsToRerollChange = (pip: number, newValue: boolean) => {\n    const pipsToRerollNewState = new Set<number>(pipsToReroll);\n    newValue ? pipsToRerollNewState.add(pip) : pipsToRerollNewState.delete(pip)\n    setPipsToReroll(pipsToRerollNewState);\n  };\n\n  const handleRerollClick = () => {\n    let numDiceToReroll = 0;\n    let newRolledDiceCounts = new Map<number,number>();\n\n    // TODO: some central spot to have PipMin=1 and PipMax=6\n    for(let pip = 1; pip <= 6; pip++) {\n      let diceForThisPip = rolledDiceCounts.get(pip) ?? 0;\n\n      if(pipsToReroll.has(pip)) {\n        numDiceToReroll += diceForThisPip;\n        newRolledDiceCounts.set(pip, 0);\n      }\n      else {\n        newRolledDiceCounts.set(pip, diceForThisPip);\n      }\n    }\n\n    newRolledDiceCounts = combineRollResults(\n      newRolledDiceCounts,\n       randomRollResult(rng, numDiceToReroll));\n\n    setRolledDiceCounts(newRolledDiceCounts);\n  };\n\n  return (\n    <Container className=\"p-3\" style={{width: '300px'}}>\n      <Row>\n        <Col className='d-flex justify-content-center'>\n          <h1 className=\"header\">MassDiceRoller</h1>\n        </Col>\n      </Row>\n      <Row>\n        <Col className='d-flex justify-content-center align-items-center'>\n          <input placeholder=\"Dice Quantity\" value={diceQuantity} onChange={handleDiceQuantityChange} style={{width: '60px'}} />\n          <Button className=\"m-2\" style={{width: '160px'}} onClick={handleRollClick}>Roll</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <ResultTable displayMin={1} displayMax={3} diceCounts={rolledDiceCounts} />\n        </Col>\n        <Col>\n          <ResultTable displayMin={4} displayMax={6} diceCounts={rolledDiceCounts} />\n        </Col>\n      </Row>\n      <PipDisplays\n        rolledDiceCounts={rolledDiceCounts}\n        pipsToReroll={pipsToReroll}\n        pipsToRerollChangeHandler={handlePipsToRerollChange}\n      />\n      <Row>\n        <Col className='d-flex justify-content-center align-items-center'>\n          <Button\n            className=\"m-2\"\n            style={{ width: '200px' }}\n            onClick={handleRerollClick}\n            disabled={pipsToReroll.size === 0}\n          >\n            Reroll\n          </Button>\n        </Col>\n      </Row>\n      <Row className='d-flex justify-content-center align-items-center'>\n        <a href=\"https://github.com/jmegner/MassDiceRoller\">GitHub repo</a>\n      </Row>\n    </Container>\n  );\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}